{"version":3,"sources":["../../src/service/contracts.tsx","../../src/service/cw20.tsx","../../src/service/error.tsx","../../src/service/sdk.ts","../../../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/service/wallet.tsx","../../src/service/ProtectedSwitch.tsx","../../src/utils/currency.ts","../../src/utils/errors.ts","../../src/components/layout/Center/component.tsx","../../src/components/layout/Center/style.ts","../../src/components/layout/Stack/component.tsx","../../src/components/layout/Stack/style.ts","../../src/components/layout/PageLayout/component.tsx","../../src/components/layout/PageLayout/style.ts","../../src/components/logic/BackButton/component.tsx","../../src/components/logic/BackButton/style.ts","../../src/components/logic/Loading/style.ts","../../src/components/logic/Loading/index.tsx","../../src/components/logic/Login/style.ts","../../src/components/logic/Login/index.tsx","../../src/config.ts","../../src/components/logic/OperationResult/style.ts","../../src/components/logic/OperationResult/index.tsx","../../src/components/logic/YourAccount/style.ts","../../src/components/logic/YourAccount/index.tsx","../../src/theme/GlobalStyle/GlobalAntOverride.ts","../../src/theme/GlobalStyle/GlobalColors.ts","../../src/theme/GlobalStyle/GlobalFonts.ts","../../src/theme/GlobalStyle/GlobalReset.ts","../../src/theme/GlobalStyle/GlobalSpacing.ts","../../src/theme/GlobalStyle/index.tsx","config.ts","App/forms/validationSchemas.ts","App/routes/AllowanceAdd/style.ts","App/routes/AllowanceAdd/index.tsx","App/paths.ts","App/routes/AllowanceEdit/FormChangeAmount/style.ts","App/routes/AllowanceEdit/FormChangeAmount/index.tsx","App/routes/AllowanceEdit/style.ts","App/routes/AllowanceEdit/index.tsx","App/routes/Allowances/style.ts","App/routes/Allowances/index.tsx","App/routes/Login/index.tsx","App/routes/OperationResult/index.tsx","App/forms/Search.tsx","App/routes/TokenDetail/FormSearchAllowing/index.tsx","App/routes/TokenDetail/style.ts","App/routes/TokenDetail/index.tsx","App/routes/Tokens/style.ts","App/routes/Tokens/TokenList/style.ts","App/routes/Tokens/TokenList/index.tsx","App/routes/Tokens/index.tsx","App/routes/TokensAdd/style.ts","App/routes/TokensAdd/index.tsx","App/routes/TokenSend/FormSendTokens/style.ts","App/routes/TokenSend/FormSendTokens/index.tsx","App/routes/TokenSend/style.ts","App/routes/TokenSend/index.tsx","App/index.tsx","index.tsx","App/routes/Allowances/assets/edit.svg","App/routes/Login/assets/cosmWasmLogo.svg","App/routes/OperationResult/assets/failIcon.svg","App/routes/OperationResult/assets/successIcon.svg","App/assets/backArrow.svg"],"names":["defaultContext","contracts","addContract","ContractsContext","React","useContracts","ContractsProvider","children","useState","setContracts","value","contract","newContract","CW20","client","use","contractAddress","balance","address","result","allowance","owner","spender","allAllowances","all_allowances","start_after","limit","allAccounts","all_accounts","accounts","tokenInfo","token_info","investment","claims","minter","mint","recipient","amount","transfer","burn","increaseAllowance","increase_allowance","decreaseAllowance","decrease_allowance","transferFrom","transfer_from","bond","unbond","claim","setError","clearError","ErrorContext","useError","ErrorProvider","error","context","loadKeplrWallet","anyWindow","Error","signer","Promise","e","loadLedgerWallet","TransportWebUSB","ledgerTransport","hdPaths","makeCosmoshubPath","prefix","addressPrefix","loadOrCreateWallet","mnemonic","key","loaded","localStorage","generated","Bip39","Random","loadOrCreateMnemonic","hdPath","_Pact","state","this","callback","_settle","_this","onFulfilled","onRejected","pact","observer","_forIn","target","body","check","keys","array","i","thenable","reject","_cycle","_forTo","Symbol","_catch","recover","throwNotInitialized","initialized","init","clear","config","changeConfig","refreshBalance","hitFaucet","getSigner","changeSigner","getClient","getStakingClient","CosmWasmContext","useSdk","SdkProvider","faucet","console","coinMap","denom","configProp","setConfig","setSigner","setClient","contextWithInit","setValue","useEffect","gasLimits","upload","exec","migrate","send","changeAdmin","gasPrice","GasPrice","createClient","Tendermint34Client","tmClient","QueryClient","createStakingClient","stakingClient","coin","ProtectedSwitch","authPath","location","to","pathname","redirectPathname","redirectState","undefined","printableCoin","ticker","Decimal","getErrorFromStackTrace","stackTrace","stringStackTrace","match","Center","tag","Tag","props","StyledCenter","styled","Stack","StyledStack","PageLayout","StyledPageLayout","BackButton","icon","path","history","useHistory","goBack","src","alt","onClick","StyledBackButton","StyledSpin","spinIndicator","style","fontSize","spin","Loading","tip","loadingText","indicator","Text","Typography","MainStack","WelcomeStack","LightText","ErrorText","Title","disableLedgerLogin","anyNavigator","Login","loadWallet","setInitializing","sdk","pathAfterLogin","appName","restProps","initializing","level","type","initBrowser","disabled","initLedger","initKeplr","chainId","chainName","rpc","rest","bech32Config","bech32PrefixAccAddr","bech32PrefixAccPub","bech32PrefixValAddr","bech32PrefixValPub","bech32PrefixConsAddr","bech32PrefixConsPub","currencies","coinDenom","coinMinimalDenom","coinDecimals","fractionalDigits","feeCurrencies","stakeCurrency","gasPriceStep","low","average","high","bip44","coinType","configKeplr","ResultText","OperationResult","defaultButtonAction","successIcon","failIcon","success","message","customButtonText","customButtonActionPath","customButtonActionState","buttonText","buttonAction","getResultContent","chosenButtonText","chosenButtonAction","AccountStack","YourAccount","hideTitle","hideBalance","printableBalance","copyToClipboard","GlobalAntOverride","createGlobalStyle","GlobalColors","GlobalFonts","GlobalReset","GlobalSpacing","GlobalStyle","configs","getAppConfig","local","rpcUrl","httpUrl","faucetUrl","feeToken","stakingToken","ucosm","uatom","uninet","ujunox","pebblenet","boot","regexStartsWithPrefix","RegExp","addressField","Yup","matches","length","requiredAddressField","required","amountField","positive","contractValidationSchema","shape","Number","isNaN","searchAddressValidationSchema","sendAddressValidationSchema","setAllowanceValidationSchema","newAmount","addAllowanceValidationSchema","FormStack","FormFieldsStack","Amount","div","AllowanceAdd","loading","setLoading","useParams","tokenName","setTokenName","tokenDecimals","setTokenDecimals","then","symbol","decimals","backArrowIcon","initialValues","onSubmit","values","spenderAddress","cw20Contract","decNewAmount","fromUserInput","decCurrentAmount","fromAtomics","allowanceOperation","isGreaterThan","minus","atomics","push","validationSchema","formikProps","name","placeholder","submitForm","isValid","dirty","FormChangeAmount","submitChangeAmount","AllowanceEdit","allowanceAmount","setAllowanceAmount","amountToDisplay","toString","TitleAmountStack","AllowancesStack","AllowanceItem","AllowanceAmountCopy","Allowances","allowances","setAllowances","tokenAmount","setTokenAmount","setFractionalDigits","amountInteger","maybeAmountDecimal","split","amountDecimal","map","allowanceInfo","index","allowanceToDisplay","editIcon","goToAllowancesEdit","appLogo","cosmWasmLogo","goToTokensList","TypedInput","validate","fast","onChange","$onChange","onBlur","$onBlur","ref","field","event","Search","FormSearchAllowing","initialAddress","setSearchedAddress","enterButton","onSearch","AllowanceStack","Allowance","TokenDetail","allowingAddress","allowingAddressParam","setAllowingAddress","setAllowance","tokenAddress","showCurrentAllowance","showSendButton","isSendButtonDisabled","showAllowancesLink","response","optionalAllowingAddress","TokenStack","TokenItem","BorderContainer","tokenCompare","a","b","TokenList","cw20Contracts","tokens","setTokens","getTokenData","useCallback","async","codeId","getContracts","forEach","newCw20contract","tokenPromises","all","sort","token","goTokenDetail","Tokens","TokensAdd","setCodeId","selectedContractAddresses","setSelectedContractAddresses","handleChangeSelected","selectedAddresses","filterCaseInsensitive","input","option","title","toLowerCase","indexOf","showInputContract","showCodeIdForm","contractAddresses","contractsPromise","getContract","catch","String","newCw20Contract","showSearch","filterOption","dataSource","label","onSelectChange","listStyle","render","item","FormField","FormSendTokens","maxAmount","sendTokensAction","sendValidationSchema","max","toFloatApproximation","concat","TokenSend","fullPathTokenDetail","recipientAddress","transferAmount","txHash","App","basename","process","exact","component","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.4e646f95.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { CW20Instance } from \"./cw20\";\n\ninterface ContractsContextType {\n  contracts: CW20Instance[];\n  readonly addContract: (newContract: CW20Instance) => void;\n}\n\nconst defaultContext: ContractsContextType = {\n  contracts: [],\n  addContract: function () {\n    return;\n  },\n};\n\nconst ContractsContext = React.createContext<ContractsContextType>(defaultContext);\n\nexport const useContracts = (): ContractsContextType => React.useContext(ContractsContext);\n\nexport function ContractsProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [contracts, setContracts] = useState<CW20Instance[]>(defaultContext.contracts);\n\n  function addContract(newContract: CW20Instance) {\n    setContracts((contracts) => {\n      const notPresent = !contracts.find(\n        (contract) => contract.contractAddress === newContract.contractAddress,\n      );\n\n      if (notPresent) return [...contracts, newContract];\n      return contracts;\n    });\n  }\n\n  const value: ContractsContextType = { contracts, addContract };\n\n  return <ContractsContext.Provider value={value}>{children}</ContractsContext.Provider>;\n}\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin } from \"@cosmjs/stargate\";\n\nexport type Expiration =\n  | { readonly at_height: number }\n  | { readonly at_time: number }\n  | { readonly never: unknown };\n\nexport interface AllowanceResponse {\n  readonly allowance: string; // integer as string\n  readonly expires: Expiration;\n}\n\nexport interface AllowanceInfo {\n  readonly allowance: string; // integer as string\n  readonly spender: string; // bech32 address\n  readonly expires: Expiration;\n}\n\nexport interface AllAllowancesResponse {\n  readonly allowances: readonly AllowanceInfo[];\n}\n\nexport interface TokenInfo {\n  readonly name: string;\n  readonly symbol: string;\n  readonly decimals: number;\n  readonly total_supply: string;\n}\n\nexport interface Investment {\n  readonly exit_tax: string;\n  readonly min_withdrawal: string;\n  readonly nominal_value: string;\n  readonly owner: string;\n  readonly staked_tokens: Coin;\n  readonly token_supply: string;\n  readonly validator: string;\n}\n\nexport interface Claim {\n  readonly amount: string;\n  readonly release_at: { readonly at_time: number };\n}\n\nexport interface Claims {\n  readonly claims: readonly Claim[];\n}\n\nexport interface AllAccountsResponse {\n  // list of bech32 address that have a balance\n  readonly accounts: readonly string[];\n}\n\nexport interface CW20Instance {\n  readonly contractAddress: string;\n\n  // queries\n  balance: (address: string) => Promise<string>;\n  allowance: (owner: string, spender: string) => Promise<AllowanceResponse>;\n  allAllowances: (owner: string, startAfter?: string, limit?: number) => Promise<AllAllowancesResponse>;\n  allAccounts: (startAfter?: string, limit?: number) => Promise<readonly string[]>;\n  tokenInfo: () => Promise<TokenInfo>;\n  investment: () => Promise<Investment>;\n  claims: (address: string) => Promise<Claims>;\n  minter: (sender: string) => Promise<any>;\n\n  // actions\n  mint: (sender: string, recipient: string, amount: string) => Promise<string>;\n  transfer: (sender: string, recipient: string, amount: string) => Promise<string>;\n  burn: (sender: string, amount: string) => Promise<string>;\n  increaseAllowance: (sender: string, recipient: string, amount: string) => Promise<string>;\n  decreaseAllowance: (sender: string, recipient: string, amount: string) => Promise<string>;\n  transferFrom: (sender: string, owner: string, recipient: string, amount: string) => Promise<string>;\n  bond: (sender: string, coin: Coin) => Promise<string>;\n  unbond: (sender: string, amount: string) => Promise<string>;\n  claim: (sender: string) => Promise<string>;\n}\n\nexport interface CW20Contract {\n  use: (contractAddress: string) => CW20Instance;\n}\n\nexport const CW20 = (client: SigningCosmWasmClient): CW20Contract => {\n  const use = (contractAddress: string): CW20Instance => {\n    const balance = async (address: string): Promise<string> => {\n      const result = await client.queryContractSmart(contractAddress, { balance: { address } });\n      return result.balance;\n    };\n\n    const allowance = async (owner: string, spender: string): Promise<AllowanceResponse> => {\n      return client.queryContractSmart(contractAddress, { allowance: { owner, spender } });\n    };\n\n    const allAllowances = async (\n      owner: string,\n      startAfter?: string,\n      limit?: number,\n    ): Promise<AllAllowancesResponse> => {\n      return client.queryContractSmart(contractAddress, {\n        all_allowances: { owner, start_after: startAfter, limit },\n      });\n    };\n\n    const allAccounts = async (startAfter?: string, limit?: number): Promise<readonly string[]> => {\n      const accounts: AllAccountsResponse = await client.queryContractSmart(contractAddress, {\n        all_accounts: { start_after: startAfter, limit },\n      });\n      return accounts.accounts;\n    };\n\n    const tokenInfo = async (): Promise<TokenInfo> => {\n      return client.queryContractSmart(contractAddress, { token_info: {} });\n    };\n\n    const investment = async (): Promise<Investment> => {\n      return client.queryContractSmart(contractAddress, { investment: {} });\n    };\n\n    const claims = async (address: string): Promise<Claims> => {\n      return client.queryContractSmart(contractAddress, { claims: { address } });\n    };\n\n    const minter = async (): Promise<any> => {\n      return client.queryContractSmart(contractAddress, { minter: {} });\n    };\n\n    // mints tokens, returns transactionHash\n    const mint = async (sender: string, recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { mint: { recipient, amount } });\n      return result.transactionHash;\n    };\n\n    // transfers tokens, returns transactionHash\n    const transfer = async (sender: string, recipient: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { transfer: { recipient, amount } });\n      return result.transactionHash;\n    };\n\n    // burns tokens, returns transactionHash\n    const burn = async (sender: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { burn: { amount } });\n      return result.transactionHash;\n    };\n\n    const increaseAllowance = async (sender: string, spender: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, {\n        increase_allowance: { spender, amount },\n      });\n      return result.transactionHash;\n    };\n\n    const decreaseAllowance = async (sender: string, spender: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, {\n        decrease_allowance: { spender, amount },\n      });\n      return result.transactionHash;\n    };\n\n    const transferFrom = async (\n      sender: string,\n      owner: string,\n      recipient: string,\n      amount: string,\n    ): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, {\n        transfer_from: { owner, recipient, amount },\n      });\n      return result.transactionHash;\n    };\n\n    const bond = async (sender: string, coin: Coin): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { bond: {} }, undefined, [coin]);\n      return result.transactionHash;\n    };\n\n    const unbond = async (sender: string, amount: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { unbond: { amount } });\n      return result.transactionHash;\n    };\n\n    const claim = async (sender: string): Promise<string> => {\n      const result = await client.execute(sender, contractAddress, { claim: {} });\n      return result.transactionHash;\n    };\n\n    return {\n      contractAddress,\n      balance,\n      allowance,\n      allAllowances,\n      allAccounts,\n      tokenInfo,\n      investment,\n      claims,\n      minter,\n      mint,\n      transfer,\n      burn,\n      increaseAllowance,\n      decreaseAllowance,\n      transferFrom,\n      bond,\n      unbond,\n      claim,\n    };\n  };\n  return { use };\n};\n","import * as React from \"react\";\n\ninterface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (error: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext: ErrorContextType = {\n  setError: () => {\n    return;\n  },\n  clearError: () => {\n    return;\n  },\n};\n\nconst ErrorContext = React.createContext<ErrorContextType>(defaultContext);\n\nexport const useError = (): ErrorContextType => React.useContext(ErrorContext);\n\nexport function ErrorProvider({ children }: React.HTMLAttributes<HTMLOrSVGElement>): JSX.Element {\n  const [error, setError] = React.useState<string>();\n\n  const context: ErrorContextType = {\n    error: error,\n    setError: setError,\n    clearError: () => {\n      setError(undefined);\n    },\n  };\n\n  return <ErrorContext.Provider value={context}>{children}</ErrorContext.Provider>;\n}\n","import { CosmWasmFeeTable } from \"@cosmjs/cosmwasm-stargate\";\nimport { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Bip39, Random } from \"@cosmjs/crypto\";\nimport { defaultGasLimits as defaultStargateGasLimits, GasLimits, GasPrice, makeCosmoshubPath, } from \"@cosmjs/stargate\";\nimport { DirectSecp256k1HdWallet, OfflineSigner } from \"@cosmjs/proto-signing\";\nimport { LedgerSigner } from \"@cosmjs/ledger-amino\";\nimport {\n  DistributionExtension,\n  QueryClient,\n  setupDistributionExtension,\n  setupStakingExtension,\n  StakingExtension,\n} from \"@cosmjs/stargate\";\nimport { Tendermint34Client } from \"@cosmjs/tendermint-rpc\";\nimport TransportWebUSB from \"@ledgerhq/hw-transport-webusb\";\nimport { AppConfig } from \"../config\";\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport type WalletLoader = (chainId: string, addressPrefix?: string) => Promise<OfflineSigner>;\n\nexport async function loadOrCreateWallet(_chainId: string, addressPrefix?: string): Promise<OfflineSigner> {\n  const mnemonic = loadOrCreateMnemonic();\n  const hdPath = makeCosmoshubPath(0);\n  const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n    hdPaths: [hdPath],\n    prefix: addressPrefix\n  });\n  return wallet;\n}\n\nexport async function loadLedgerWallet(_chainId: string, addressPrefix?: string): Promise<OfflineSigner> {\n  const interactiveTimeout = 120_000;\n  const ledgerTransport = await TransportWebUSB.create(interactiveTimeout, interactiveTimeout);\n\n  return new LedgerSigner(ledgerTransport, { hdPaths: [makeCosmoshubPath(0)], prefix: addressPrefix });\n}\n\nexport async function loadKeplrWallet(chainId: string): Promise<OfflineSigner> {\n  const anyWindow: any = window;\n  if (!anyWindow.getOfflineSigner) {\n    throw new Error(\"Keplr extension is not available\");\n  }\n\n  const signer = anyWindow.getOfflineSigner(chainId);\n  signer.signAmino = signer.signAmino ?? signer.sign;\n\n  return Promise.resolve(signer);\n}\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function createClient(config: AppConfig, signer: OfflineSigner): Promise<SigningCosmWasmClient> {\n  const gasLimits: GasLimits<CosmWasmFeeTable> = {\n    ...defaultStargateGasLimits,\n    upload: 1500000,\n    init: 600000,\n    exec: 400000,\n    migrate: 600000,\n    send: 80000,\n    changeAdmin: 80000,\n  };\n\n  return SigningCosmWasmClient.connectWithSigner(config.rpcUrl, signer, {\n    prefix: config.addressPrefix,\n    gasPrice: GasPrice.fromString(`${config.gasPrice}${config.feeToken}`),\n    gasLimits: gasLimits,\n  });\n}\n\nexport async function createStakingClient(\n  apiUrl: string,\n): Promise<QueryClient & StakingExtension & DistributionExtension> {\n  const tmClient = await Tendermint34Client.connect(apiUrl);\n  return QueryClient.withExtensions(tmClient, setupStakingExtension, setupDistributionExtension);\n}\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { FaucetClient } from \"@cosmjs/faucet-client\";\nimport { Coin } from \"@cosmjs/stargate\";\nimport { OfflineSigner } from \"@cosmjs/proto-signing\";\nimport { QueryClient, StakingExtension, DistributionExtension } from \"@cosmjs/stargate\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { AppConfig } from \"../config\";\nimport { useError } from \"./error\";\nimport { createClient, createStakingClient } from \"./sdk\";\n\ninterface CosmWasmContextType {\n  readonly initialized: boolean;\n  readonly init: (signer: OfflineSigner) => void;\n  readonly clear: () => void;\n  readonly config: Partial<AppConfig>;\n  readonly changeConfig: (updates: Partial<AppConfig>) => void;\n  readonly address: string;\n  readonly balance: readonly Coin[];\n  readonly refreshBalance: () => Promise<void>;\n  readonly hitFaucet: () => Promise<void>;\n  readonly getSigner: () => OfflineSigner;\n  readonly changeSigner: (newSigner: OfflineSigner) => void;\n  readonly getClient: () => SigningCosmWasmClient;\n  readonly getStakingClient: () => QueryClient & StakingExtension & DistributionExtension;\n}\n\nfunction throwNotInitialized(): any {\n  throw new Error(\"Not yet initialized\");\n}\n\nconst defaultContext: CosmWasmContextType = {\n  initialized: false,\n  init: throwNotInitialized,\n  clear: throwNotInitialized,\n  config: {},\n  changeConfig: throwNotInitialized,\n  address: \"\",\n  balance: [],\n  refreshBalance: throwNotInitialized,\n  hitFaucet: throwNotInitialized,\n  getSigner: throwNotInitialized,\n  changeSigner: throwNotInitialized,\n  getClient: throwNotInitialized,\n  getStakingClient: throwNotInitialized,\n};\n\nconst CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\ninterface SdkProviderProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly config: AppConfig;\n}\n\nexport function SdkProvider({ config: configProp, children }: SdkProviderProps): JSX.Element {\n  const { setError } = useError();\n\n  const [config, setConfig] = useState(configProp);\n  const [signer, setSigner] = useState<OfflineSigner>();\n  const [client, setClient] = useState<SigningCosmWasmClient>();\n\n  const contextWithInit = { ...defaultContext, init: setSigner };\n  const [value, setValue] = useState<CosmWasmContextType>(contextWithInit);\n\n  function clear(): void {\n    setValue({ ...contextWithInit });\n    setClient(undefined);\n    setSigner(undefined);\n    setConfig(configProp);\n  }\n\n  function changeConfig(updates: Partial<AppConfig>): void {\n    setConfig((config) => ({ ...config, ...updates }));\n  }\n\n  // Get balance for each coin specified in config.coinMap\n  async function refreshBalance(address: string, balance: Coin[]): Promise<void> {\n    if (!client) return;\n\n    balance.length = 0;\n    for (const denom in config.coinMap) {\n      const coin = await client.getBalance(address, denom);\n      if (coin) balance.push(coin);\n    }\n  }\n\n  // Get feeToken balance from faucet\n  async function hitFaucet(address: string): Promise<void> {\n    if (!config.faucetUrl || !config.feeToken) return;\n\n    try {\n      const faucet = new FaucetClient(config.faucetUrl);\n      await faucet.credit(address, config.feeToken);\n    } catch (error) {\n      setError(error.message);\n      console.error(error);\n    }\n  }\n\n  useEffect(() => {\n    if (!signer) return;\n\n    (async function updateClient(): Promise<void> {\n      try {\n        const client = await createClient(config, signer);\n        setClient(client);\n      } catch (error) {\n        setError(error.message);\n      }\n    })();\n  }, [signer, config]);\n\n  useEffect(() => {\n    if (!signer || !client) return;\n\n    const balance: Coin[] = [];\n\n    (async function updateValue(): Promise<void> {\n      const address = (await signer.getAccounts())[0].address;\n\n      await refreshBalance(address, balance);\n      if (!balance.find((coin) => coin.denom === config.feeToken)) {\n        await hitFaucet(address);\n      }\n      await refreshBalance(address, balance);\n\n      const stakingClient = await createStakingClient(config.rpcUrl);\n\n      setValue({\n        initialized: true,\n        init: () => {},\n        clear,\n        config,\n        changeConfig,\n        address,\n        balance,\n        refreshBalance: refreshBalance.bind(null, address, balance),\n        hitFaucet: hitFaucet.bind(null, address),\n        getSigner: () => signer,\n        changeSigner: setSigner,\n        getClient: () => client,\n        getStakingClient: () => stakingClient,\n      });\n    })();\n  }, [client]);\n\n  return <CosmWasmContext.Provider value={value}>{children}</CosmWasmContext.Provider>;\n}\n","import React from \"react\";\nimport { Redirect, Switch, SwitchProps } from \"react-router-dom\";\nimport { useSdk } from \"./wallet\";\n\nexport interface RedirectLocation {\n  readonly redirectPathname: string;\n  readonly redirectState: any;\n}\n\ninterface ProtectedSwitchProps extends SwitchProps {\n  readonly authPath: string;\n}\n\nexport function ProtectedSwitch({ authPath, children, location }: ProtectedSwitchProps): JSX.Element {\n  const { initialized } = useSdk();\n\n  return initialized ? (\n    <Switch location={location}>{children}</Switch>\n  ) : (\n    <Redirect\n      to={{\n        pathname: authPath,\n        state: location ? { redirectPathname: location.pathname, redirectState: location.state } : undefined,\n      }}\n    />\n  );\n}\n","import { Coin } from \"@cosmjs/stargate\";\nimport { Decimal } from \"@cosmjs/math\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableCoin(coin?: Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n}\n\nexport function printableBalance(balance?: readonly Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport interface MappedCoin {\n  readonly denom: string;\n  readonly fractionalDigits: number;\n}\n\nexport interface CoinMap {\n  readonly [key: string]: MappedCoin;\n}\n\nexport function nativeCoinToDisplay(coin: Coin, coinMap: CoinMap): Coin {\n  if (!coinMap) return coin;\n\n  const coinToDisplay = coinMap[coin.denom];\n  if (!coinToDisplay) return coin;\n\n  const amountToDisplay = Decimal.fromAtomics(coin.amount, coinToDisplay.fractionalDigits).toString();\n\n  return { denom: coinToDisplay.denom, amount: amountToDisplay };\n}\n\n// display amount is eg \"12.0346\", return is in native tokens\n// with 6 fractional digits, this would be eg. \"12034600\"\nexport function displayAmountToNative(\n  amountToDisplay: string,\n  coinMap: CoinMap,\n  nativeDenom: string,\n): string {\n  const fractionalDigits = coinMap[nativeDenom]?.fractionalDigits;\n  if (fractionalDigits) {\n    // use https://github.com/CosmWasm/cosmjs/blob/v0.22.2/packages/math/src/decimal.ts\n    const decimalAmount = Decimal.fromUserInput(amountToDisplay, fractionalDigits);\n    return decimalAmount.atomics;\n  }\n\n  return amountToDisplay;\n}\n","// Get string error from operation stack trace. Matches last line but removes last \"message index\" part\nexport function getErrorFromStackTrace(stackTrace: any): string {\n  const stringStackTrace = (stackTrace || \"\").toString();\n  const match = stringStackTrace.match(/.*\\s*$/g)[0];\n  const error = match.substring(0, match.lastIndexOf(\";\"));\n\n  return error || stringStackTrace;\n}\n","import * as React from \"react\";\n\nexport interface CenterProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Center({ tag: Tag = \"div\", children, ...props }: CenterProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Center } from \"./component\";\n\nexport const StyledCenter = styled(Center)`\n  box-sizing: content-box;\n\n  max-width: var(--max-width, none);\n\n  margin-left: auto;\n  margin-right: auto;\n\n  text-align: center;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import * as React from \"react\";\n\nexport interface StackProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly tag?: keyof JSX.IntrinsicElements;\n}\n\nexport function Stack({ tag: Tag = \"div\", children, ...props }: StackProps): JSX.Element {\n  return <Tag {...props}>{children}</Tag>;\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"./component\";\n\nexport const StyledStack = styled(Stack)`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n\n  & > * {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  & > * + * {\n    margin-top: var(--gap, var(--s0));\n  }\n`;\n","import { Center, CenterProps } from \"../Center\";\nimport * as React from \"react\";\n\nexport function PageLayout({ children, ...props }: CenterProps): JSX.Element {\n  return (\n    <Center tag=\"main\" {...props}>\n      {children}\n    </Center>\n  );\n}\n","import styled from \"styled-components\";\nimport { PageLayout } from \"./component\";\n\nexport const StyledPageLayout = styled(PageLayout)`\n  --max-width: 22rem;\n  --gap: var(--s8);\n\n  padding: var(--s4);\n\n  /* Reduces padding when width < 380px, but uses em for better media query support */\n  @media (max-width: 23.6875em) {\n    padding: var(--s-1) 0 var(--s-2) 0;\n  }\n\n  [alt=\"Back arrow\"] {\n    align-self: flex-start;\n  }\n`;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport interface BackButtonProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly icon: string;\n  readonly path?: string;\n  readonly state?: any;\n}\n\nexport function BackButton({ icon, path, state, ...props }: BackButtonProps): JSX.Element {\n  const history = useHistory();\n  const goBack = path ? () => history.push(path, state) : history.goBack;\n\n  return <img src={icon} alt=\"Back arrow\" onClick={goBack} {...props} />;\n}\n","import styled from \"styled-components\";\nimport { BackButton } from \"./component\";\n\nexport const StyledBackButton = styled(BackButton)`\n  cursor: pointer;\n`;\n","import { Spin } from \"antd\";\nimport styled from \"styled-components\";\n\nexport const StyledSpin = styled(Spin)`\n  & > span + div {\n    margin-top: var(--s2);\n  }\n`;\n","import { LoadingOutlined } from \"@ant-design/icons\";\nimport * as React from \"react\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { StyledSpin } from \"./style\";\n\nconst spinIndicator = <LoadingOutlined style={{ fontSize: \"6.25rem\" }} spin />;\n\ninterface LoadingProps {\n  readonly loadingText?: string;\n}\n\nexport function Loading({ loadingText }: LoadingProps): JSX.Element {\n  const tip = loadingText || \"Loading...\";\n\n  return (\n    <PageLayout>\n      <StyledSpin indicator={spinIndicator} tip={tip} />\n    </PageLayout>\n  );\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s9);\n  }\n`;\n\nexport const WelcomeStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const LightText = styled(Text)`\n  display: block;\n  font-weight: lighter;\n`;\n\nexport const ErrorText = styled(Text)`\n  color: var(--color-red);\n`;\n","import {\n  AppConfig,\n  configKeplr,\n  loadKeplrWallet,\n  loadLedgerWallet,\n  loadOrCreateWallet,\n  RedirectLocation,\n  useError,\n  useSdk,\n  WalletLoader,\n} from \"@cosmicdapp/logic\";\nimport { Button, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { Loading } from \"../../logic/Loading\";\nimport { ErrorText, LightText, MainStack, WelcomeStack } from \"./style\";\n\nconst { Title } = Typography;\n\nfunction disableLedgerLogin() {\n  const anyNavigator: any = navigator;\n  return !anyNavigator?.usb;\n}\n\nfunction disableKeplrLogin() {\n  // TODO find check that works on reload\n  //const anyWindow: any = window;\n  //return !(anyWindow.getOfflineSigner && anyWindow.keplr.experimentalSuggestChain);\n  return false;\n}\n\ninterface LoginProps extends React.HTMLAttributes<HTMLOrSVGElement> {\n  readonly pathAfterLogin: string;\n  readonly appName: string;\n  readonly appLogo: string;\n  readonly config: AppConfig;\n}\n\nexport function Login({ config, pathAfterLogin, appName, appLogo, ...restProps }: LoginProps): JSX.Element {\n  const history = useHistory();\n  const state = history.location.state as RedirectLocation;\n  const { error, setError, clearError } = useError();\n  const sdk = useSdk();\n\n  const [initializing, setInitializing] = useState(false);\n\n  async function init(loadWallet: WalletLoader) {\n    setInitializing(true);\n    clearError();\n\n    try {\n      const signer = await loadWallet(config.chainId, config.addressPrefix);\n      sdk.init(signer);\n    } catch (error) {\n      console.error(error);\n      setError(Error(error).message);\n      setInitializing(false);\n    }\n  }\n\n  async function initBrowser() {\n    await init(loadOrCreateWallet);\n  }\n\n  async function initLedger() {\n    await init(loadLedgerWallet);\n  }\n\n  async function initKeplr() {\n    const anyWindow: any = window;\n    try {\n      await anyWindow.keplr.experimentalSuggestChain(configKeplr(config));\n      await anyWindow.keplr.enable(config.chainId);\n      await init(loadKeplrWallet);\n    } catch (error) {\n      console.error(error);\n      setError(Error(error).message);\n    }\n  }\n\n  useEffect(() => {\n    if (!sdk.initialized) return;\n\n    if (state) {\n      history.push(state.redirectPathname, state.redirectState);\n    } else {\n      history.push(pathAfterLogin);\n    }\n  }, [sdk.initialized, state, history]);\n\n  return initializing ? (\n    <Loading loadingText=\"Initializing app...\" />\n  ) : (\n    <PageLayout {...restProps}>\n      <MainStack>\n        <WelcomeStack>\n          <Typography>\n            <Title level={2}>Hello!</Title>\n            <LightText>Welcome to your {appName}</LightText>\n            <LightText>Select one of the following options to start:</LightText>\n          </Typography>\n          {error && <ErrorText>{error}</ErrorText>}\n          <Button type=\"primary\" onClick={initBrowser}>\n            Browser (Demo)\n          </Button>\n          <Button type=\"primary\" disabled={disableLedgerLogin()} onClick={initLedger}>\n            Ledger (Secure, Chrome)\n          </Button>\n          <Button type=\"primary\" disabled={disableKeplrLogin()} onClick={initKeplr}>\n            Keplr (Secure)\n          </Button>\n        </WelcomeStack>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import { CoinMap } from \"./utils\";\n\nexport interface KeplrCoin {\n  readonly coinDenom: string;\n  readonly coinMinimalDenom: string;\n  readonly coinDecimals: number;\n}\n\nexport interface KeplrConfig {\n  readonly chainId: string;\n  readonly chainName: string;\n  readonly rpc: string;\n  readonly rest: string;\n  readonly bech32Config: {\n    readonly bech32PrefixAccAddr: string;\n    readonly bech32PrefixAccPub: string;\n    readonly bech32PrefixValAddr: string;\n    readonly bech32PrefixValPub: string;\n    readonly bech32PrefixConsAddr: string;\n    readonly bech32PrefixConsPub: string;\n  };\n  readonly currencies: readonly KeplrCoin[];\n  readonly feeCurrencies: readonly KeplrCoin[];\n  readonly stakeCurrency: KeplrCoin;\n  readonly gasPriceStep: {\n    readonly low: number;\n    readonly average: number;\n    readonly high: number;\n  };\n  readonly bip44: { readonly coinType: number };\n  readonly coinType: number;\n}\n\nexport interface AppConfig {\n  readonly chainId: string;\n  readonly chainName: string;\n  readonly addressPrefix: string;\n  readonly rpcUrl: string;\n  readonly httpUrl: string;\n  readonly faucetUrl: string;\n  readonly feeToken: string;\n  readonly stakingToken: string;\n  readonly coinMap: CoinMap;\n  readonly gasPrice: number;\n  readonly codeId?: number;\n}\n\nexport interface NetworkConfigs {\n  readonly local: AppConfig;\n  readonly [key: string]: AppConfig;\n}\n\nexport function getAppConfig(configs: NetworkConfigs): AppConfig {\n  const network = process.env.REACT_APP_NETWORK;\n  if (!network) return configs.local;\n\n  const config = configs[network];\n  if (!config) {\n    throw new Error(`No configuration found for network ${network}`);\n  }\n\n  return config;\n}\n\nexport function configKeplr(config: AppConfig): KeplrConfig {\n  return {\n    chainId: config.chainId,\n    chainName: config.chainName,\n    rpc: config.rpcUrl,\n    rest: config.httpUrl,\n    bech32Config: {\n      bech32PrefixAccAddr: `${config.addressPrefix}`,\n      bech32PrefixAccPub: `${config.addressPrefix}pub`,\n      bech32PrefixValAddr: `${config.addressPrefix}valoper`,\n      bech32PrefixValPub: `${config.addressPrefix}valoperpub`,\n      bech32PrefixConsAddr: `${config.addressPrefix}valcons`,\n      bech32PrefixConsPub: `${config.addressPrefix}valconspub`,\n    },\n    currencies: [\n      {\n        coinDenom: config.coinMap[config.feeToken].denom,\n        coinMinimalDenom: config.feeToken,\n        coinDecimals: config.coinMap[config.feeToken].fractionalDigits,\n      },\n      {\n        coinDenom: config.coinMap[config.stakingToken].denom,\n        coinMinimalDenom: config.stakingToken,\n        coinDecimals: config.coinMap[config.stakingToken].fractionalDigits,\n      },\n    ],\n    feeCurrencies: [\n      {\n        coinDenom: config.coinMap[config.feeToken].denom,\n        coinMinimalDenom: config.feeToken,\n        coinDecimals: config.coinMap[config.feeToken].fractionalDigits,\n      },\n    ],\n    stakeCurrency: {\n      coinDenom: config.coinMap[config.stakingToken].denom,\n      coinMinimalDenom: config.stakingToken,\n      coinDecimals: config.coinMap[config.stakingToken].fractionalDigits,\n    },\n    gasPriceStep: {\n      low: config.gasPrice / 2,\n      average: config.gasPrice,\n      high: config.gasPrice * 2,\n    },\n    bip44: { coinType: 118 },\n    coinType: 118,\n  };\n}\n","import { Typography } from \"antd\";\nimport styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nconst { Text } = Typography;\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n`;\n\nexport const ResultText = styled(Text)`\n  font-size: var(--s-1);\n\n  &[data-result=\"success\"] {\n    color: var(--color-green);\n  }\n\n  &[data-result=\"failure\"] {\n    color: var(--color-red);\n  }\n`;\n","import { Button } from \"antd\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { PageLayout } from \"../../layout/PageLayout\";\nimport { MainStack, ResultText } from \"./style\";\n\ninterface ResultContent {\n  readonly result: \"success\" | \"failure\";\n  readonly icon: string;\n  readonly buttonText: string;\n  readonly buttonAction: () => void;\n}\n\nexport interface OperationResultState {\n  readonly success: boolean;\n  readonly message: string;\n  readonly error?: string;\n  readonly customButtonText?: string;\n  readonly customButtonActionPath?: string;\n  readonly customButtonActionState?: any;\n}\n\nexport interface OperationResultProps {\n  readonly defaultButtonAction: (history: History) => void;\n  readonly successIcon: string;\n  readonly failIcon: string;\n}\n\nexport function OperationResult({\n  defaultButtonAction,\n  successIcon,\n  failIcon,\n}: OperationResultProps): JSX.Element {\n  const history = useHistory();\n\n  const {\n    success,\n    message,\n    error,\n    customButtonText,\n    customButtonActionPath,\n    customButtonActionState,\n  } = history.location.state as OperationResultState;\n\n  function getResultContent(success: boolean): ResultContent {\n    if (success) {\n      return {\n        result: \"success\",\n        icon: successIcon,\n        buttonText: \"Home\",\n        buttonAction: () => defaultButtonAction(history),\n      };\n    }\n\n    return {\n      result: \"failure\",\n      icon: failIcon,\n      buttonText: \"Retry\",\n      buttonAction: history.goBack,\n    };\n  }\n\n  const { icon, result, buttonText, buttonAction } = getResultContent(success);\n\n  const chosenButtonText = customButtonText || buttonText;\n  const chosenButtonAction = customButtonActionPath\n    ? () => history.push(customButtonActionPath, customButtonActionState)\n    : buttonAction;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <img src={icon} alt=\"Result icon\" />\n        <ResultText data-result={result}>{message}</ResultText>\n        {error && <ResultText data-result={result}>{error}</ResultText>}\n        <Button type=\"primary\" onClick={chosenButtonAction}>\n          {chosenButtonText}\n        </Button>\n      </MainStack>\n    </PageLayout>\n  );\n}\n","import styled from \"styled-components\";\nimport { Stack } from \"../../layout/Stack\";\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s-2);\n  }\n\n  h3,\n  div[role=\"separator\"] {\n    margin: 0;\n  }\n\n  span,\n  button {\n    overflow-wrap: anywhere;\n  }\n\n  span {\n    display: block;\n    font-size: var(--s-1);\n  }\n\n  span + span {\n    font-weight: bold;\n  }\n\n  button,\n  button span {\n    font-size: var(--s0);\n  }\n\n  button {\n    height: 100%;\n    white-space: normal;\n  }\n`;\n","import { printableBalance, useSdk } from \"@cosmicdapp/logic\";\nimport { Button, Divider, Typography } from \"antd\";\nimport copyToClipboard from \"clipboard-copy\";\nimport React from \"react\";\nimport { StackProps } from \"../../layout/Stack\";\nimport { AccountStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface YourAccountProps extends StackProps {\n  readonly hideTitle?: boolean;\n  readonly hideBalance?: boolean;\n}\n\nexport function YourAccount({ tag, hideTitle, hideBalance }: YourAccountProps): JSX.Element {\n  const { address, balance } = useSdk();\n\n  return (\n    <AccountStack tag={tag}>\n      {!hideTitle && (\n        <header>\n          <Title level={3}>Your Account</Title>\n          {!hideBalance && <Divider />}\n        </header>\n      )}\n      <Text>{address}</Text>\n      {!hideBalance && <Text>({printableBalance(balance)})</Text>}\n      <Button type=\"primary\" onClick={() => copyToClipboard(address)}>\n        Copy Account Address\n      </Button>\n    </AccountStack>\n  );\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalAntOverride = createGlobalStyle`\n  .ant-btn:not(.ant-input-search-button) {\n    width: var(--max-width);\n    max-width: 100vw;\n  }\n  \n  .ant-form div[role=\"alert\"] li {\n    color: var(--form-error);\n    font-size: var(--s-1);\n    text-align: left;\n    margin: var(--s-1);\n  \n    &::before {\n      content: \"* \";\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalColors = createGlobalStyle`\n  :root {\n    --color-black: #333;\n    --color-gray-light: #f2f2f2;\n    --color-red: #eb5757;\n    --color-green: #27ae60;\n    --color-blue: #2f80ed;\n    --color-blue-light: #1890ff;\n\n    --color-primary: var(--color-blue);\n    --button-color: var(--color-blue-light);\n    --text-color: var(--color-primary);\n    --heading-color: var(--color-primary);\n    --form-error: var(--color-red);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalFonts = createGlobalStyle`\n  :root {\n    --ff-montserrat: Montserrat, sans-serif;\n    --ff-iceland: Iceland, serif;\n\n    --ff-text: var(--ff-montserrat);\n    --ff-heading: var(--ff-iceland);\n    \n    font-family: var(--ff-text);\n  }\n\n  p,\n  span {\n    font-family: var(--ff-text);\n    font-size: var(--s0);\n    overflow-wrap: anywhere;\n  }\n  \n  h1,\n  h2,\n  h3 {\n    font-family: var(--ff-heading);\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalReset = createGlobalStyle`\n  *,\n  *::before,\n  *::after {\n    box-sizing: border-box;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    min-height: 100vh;\n    line-height: 1.5;\n    text-rendering: optimizeSpeed;\n  }\n  \n  body,\n  h1,\n  h2,\n  p,\n  ul[class],\n  ol[class] {\n    margin: 0;\n  }\n  \n  ul[class],\n  ol[class] {\n    padding: 0;\n    list-style: none;\n  }\n  \n  button,\n  input,\n  select,\n  textarea {\n    font: inherit;\n  }\n  \n  img {\n    display: block;\n    max-width: 100%;\n  }\n  \n  @media (prefers-reduced-motion: reduce) {\n    * {\n      animation-duration: 0.01s !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01s !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalSpacing = createGlobalStyle`\n  :root {\n    --ratio: 1.25;\n\n    --s-6: calc(var(--s-5) / var(--ratio));\n    --s-5: calc(var(--s-4) / var(--ratio));\n    --s-4: calc(var(--s-3) / var(--ratio));\n    --s-3: calc(var(--s-2) / var(--ratio));\n    --s-2: calc(var(--s-1) / var(--ratio));\n    --s-1: calc(var(--s0) / var(--ratio));\n    --s0: 1rem;\n    --s1: calc(var(--s0) * var(--ratio));\n    --s2: calc(var(--s1) * var(--ratio));\n    --s3: calc(var(--s2) * var(--ratio));\n    --s4: calc(var(--s3) * var(--ratio));\n    --s5: calc(var(--s4) * var(--ratio));\n    --s6: calc(var(--s5) * var(--ratio));\n    --s7: calc(var(--s6) * var(--ratio));\n    --s8: calc(var(--s7) * var(--ratio));\n    --s9: calc(var(--s8) * var(--ratio));\n  }\n`;\n","import React from \"react\";\nimport { GlobalAntOverride } from \"./GlobalAntOverride\";\nimport { GlobalColors } from \"./GlobalColors\";\nimport { GlobalFonts } from \"./GlobalFonts\";\nimport { GlobalReset } from \"./GlobalReset\";\nimport { GlobalSpacing } from \"./GlobalSpacing\";\n\nexport function GlobalStyle(): JSX.Element {\n  return (\n    <>\n      <GlobalReset />\n      <GlobalSpacing />\n      <GlobalColors />\n      <GlobalFonts />\n      <GlobalAntOverride />\n    </>\n  );\n}\n","import { AppConfig, getAppConfig, NetworkConfigs } from \"@cosmicdapp/logic\";\n\nconst local: AppConfig = {\n  chainId: \"testing\",\n  chainName: \"Testing\",\n  addressPrefix: \"wasm\",\n  rpcUrl: \"http://localhost:26659\",\n  httpUrl: \"http://localhost:1317\",\n  faucetUrl: \"http://localhost:8000\",\n  feeToken: \"ucosm\",\n  stakingToken: \"uatom\",\n  coinMap: {\n    ucosm: { denom: \"COSM\", fractionalDigits: 6 },\n    uatom: { denom: \"ATOM\", fractionalDigits: 6 },\n  },\n  gasPrice: 0.025,\n};\n\nconst uninet: AppConfig = {\n  chainId: \"uni\",\n  chainName: \"Uni\",\n  addressPrefix: \"juno\",\n  rpcUrl: \"https://rpc.uni.juno.deuslabs.fi\",\n  httpUrl: \"https://lcd.uni.juno.deuslabs.fi\",\n  faucetUrl: \"https://faucet.uni.juno.deuslabs.fi\",\n  feeToken: \"ujunox\",\n  stakingToken: \"ujunox\",\n  coinMap: {\n    ujunox: { denom: \"JUNOX\", fractionalDigits: 6 },\n  },\n  gasPrice: 0.025,\n};\n\nconst pebblenet: AppConfig = {\n  chainId: \"space-pussy-1\",\n  chainName: \"Space Pussy\",\n  addressPrefix: \"bostrom\",\n  rpcUrl: \"https://rpc.space-pussy-1.cybernode.ai\",\n  httpUrl: \"https://lcd.space-pussy-1.cybernode.ai\",\n  faucetUrl: \"http://faucet.space-pussy-1.cybernode.ai\",\n  feeToken: \"boot\",\n  stakingToken: \"boot\",\n  coinMap: {\n    boot: { denom: \"BOOT\", fractionalDigits: 0 },\n  },\n  gasPrice: 0.01,\n};\n\nconst configs: NetworkConfigs = { local, uninet, pebblenet };\nexport const config = getAppConfig(configs);\n","import * as Yup from \"yup\";\nimport { config } from \"../../config\";\n\nconst regexStartsWithPrefix = new RegExp(`^${config.addressPrefix}`);\n\nexport const addressField = Yup.string()\n  .matches(regexStartsWithPrefix, `\"${config.addressPrefix}\" prefix required`)\n  .length(59 + config.addressPrefix.length, \"Address invalid\");\nexport const requiredAddressField = addressField.required(\"An address is required\");\nexport const amountField = Yup.number()\n  .required(\"An amount is required\")\n  .positive(\"Amount should be positive\");\n\nexport const contractValidationSchema = Yup.object().shape({\n  contract: Yup.lazy((value) => {\n    if (!Number.isNaN(Number(value))) return Yup.number().positive();\n    return requiredAddressField;\n  }),\n});\nexport const searchAddressValidationSchema = Yup.object().shape({ address: addressField });\nexport const sendAddressValidationSchema = Yup.object().shape({ address: requiredAddressField });\nexport const setAllowanceValidationSchema = Yup.object().shape({ newAmount: amountField });\nexport const addAllowanceValidationSchema = Yup.object().shape({\n  address: requiredAddressField,\n  amount: amountField,\n});\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n`;\n\nexport const FormFieldsStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  display: flex;\n  align-items: baseline;\n\n  span {\n    margin-left: var(--s1);\n    font-family: var(--ff-iceland);\n    font-size: var(--s1);\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, getErrorFromStackTrace, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { addAllowanceValidationSchema } from \"../../forms/validationSchemas\";\nimport { pathAllowances, pathOperationResult, pathTokens } from \"../../paths\";\nimport { Amount, FormFieldsStack, FormStack, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface FormAddAllowanceFields {\n  readonly address: string;\n  readonly amount: string;\n}\n\ninterface AllowanceAddParams {\n  readonly contractAddress: string;\n}\n\nfunction AllowanceAdd(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { getClient, address } = useSdk();\n\n  const { contractAddress }: AllowanceAddParams = useParams();\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenDecimals, setTokenDecimals] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.tokenInfo().then((tokenInfo) => {\n      setTokenName(tokenInfo.symbol);\n      setTokenDecimals(tokenInfo.decimals);\n    });\n  }, [getClient, contractAddress]);\n\n  const submitAddAllowance = (values: FormAddAllowanceFields) => {\n    setLoading(true);\n\n    const { address: spenderAddress, amount: newAmount } = values;\n\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.allowance(address, spenderAddress).then(({ allowance }) => {\n      const decNewAmount = Decimal.fromUserInput(newAmount, tokenDecimals);\n      const decCurrentAmount = Decimal.fromAtomics(allowance, tokenDecimals);\n\n      try {\n        let allowanceOperation: Promise<string> = Promise.reject(\"\");\n\n        if (decNewAmount.isGreaterThan(decCurrentAmount)) {\n          allowanceOperation = cw20Contract.increaseAllowance(\n            address,\n            spenderAddress,\n            decNewAmount.minus(decCurrentAmount).atomics,\n          );\n        } else {\n          allowanceOperation = cw20Contract.decreaseAllowance(\n            address,\n            spenderAddress,\n            decCurrentAmount.minus(decNewAmount).atomics,\n          );\n        }\n\n        allowanceOperation.then(() => {\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `${newAmount} ${tokenName} allowance for ${spenderAddress} successfully added `,\n              customButtonText: \"Tokens\",\n            } as OperationResultState,\n          });\n        });\n      } catch (stackTrace) {\n        console.error(stackTrace);\n\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: false,\n            message: \"Could not set allowance:\",\n            error: getErrorFromStackTrace(stackTrace),\n            customButtonActionPath: `${pathAllowances}/${contractAddress}`,\n          } as OperationResultState,\n        });\n      }\n    });\n  };\n\n  return (\n    (loading && <Loading loadingText={`Adding allowance...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackButton icon={backArrowIcon} path={pathTokens} />\n          <Title>Add Allowance</Title>\n          <Formik\n            initialValues={{ address: \"\", amount: \"\" }}\n            onSubmit={submitAddAllowance}\n            validationSchema={addAllowanceValidationSchema}\n          >\n            {(formikProps) => (\n              <Form>\n                <FormStack>\n                  <FormFieldsStack>\n                    <FormItem name=\"address\">\n                      <Input name=\"address\" placeholder=\"Enter address\" />\n                    </FormItem>\n                    <Amount>\n                      <FormItem name=\"amount\">\n                        <Input name=\"amount\" placeholder=\"Enter amount\" />\n                      </FormItem>\n                      <Text>{tokenName}</Text>\n                    </Amount>\n                  </FormFieldsStack>\n                  <Button\n                    type=\"primary\"\n                    onClick={formikProps.submitForm}\n                    disabled={!(formikProps.isValid && formikProps.dirty)}\n                  >\n                    Confirm\n                  </Button>\n                </FormStack>\n              </Form>\n            )}\n          </Formik>\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n\nexport default AllowanceAdd;\n","export const pathLogin = \"/login\";\nexport const pathTokens = \"/tokens\";\nexport const pathTokensAdd = \"/tokens/add\";\nexport const pathTokenDetail = \"/token/detail\";\nexport const pathTokenSend = \"/token/send\";\nexport const pathAllowances = \"/allowances\";\nexport const pathAllowanceAdd = \"/add\";\nexport const pathAllowanceEdit = \"/edit\";\nexport const pathOperationResult = \"/result\";\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n`;\n","import { Button } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport { setAllowanceValidationSchema } from \"../../../forms/validationSchemas\";\nimport { FormStack } from \"./style\";\n\nexport interface FormChangeAmountFields {\n  readonly newAmount: string;\n}\n\ninterface FormChangeAmountProps {\n  readonly submitChangeAmount: (values: unknown) => void;\n}\n\nexport function FormChangeAmount({ submitChangeAmount }: FormChangeAmountProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ newAmount: \"\" }}\n      onSubmit={submitChangeAmount}\n      validationSchema={setAllowanceValidationSchema}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormStack>\n            <FormItem name=\"newAmount\">\n              <Input name=\"newAmount\" placeholder=\"Enter new amount\" />\n            </FormItem>\n            <Button\n              type=\"primary\"\n              onClick={formikProps.submitForm}\n              disabled={!(formikProps.isValid && formikProps.dirty)}\n            >\n              Confirm\n            </Button>\n          </FormStack>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s3);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  & > span {\n    font-size: var(--s-1);\n  }\n`;\n\nexport const Amount = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: center;\n\n  & > * + * {\n    margin-left: var(--s-1);\n  }\n\n  span {\n    font-size: var(--s-1);\n  }\n\n  span + span {\n    font-size: var(--s1);\n    font-weight: bolder;\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, getErrorFromStackTrace, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathAllowances, pathOperationResult, pathTokens } from \"../../paths\";\nimport { FormChangeAmount, FormChangeAmountFields } from \"./FormChangeAmount\";\nimport { Amount, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface AllowanceEditParams {\n  readonly contractAddress: string;\n  readonly spenderAddress: string;\n}\n\nfunction AllowanceEdit(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { getClient, address } = useSdk();\n\n  const { contractAddress, spenderAddress }: AllowanceEditParams = useParams();\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenDecimals, setTokenDecimals] = useState(0);\n  const [allowanceAmount, setAllowanceAmount] = useState(\"0\");\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.tokenInfo().then((tokenInfo) => {\n      setTokenName(tokenInfo.symbol);\n      setTokenDecimals(tokenInfo.decimals);\n    });\n    cw20Contract.allowance(address, spenderAddress).then(({ allowance }) => setAllowanceAmount(allowance));\n  }, [getClient, contractAddress, address, spenderAddress]);\n\n  const submitChangeAmount = (values: FormChangeAmountFields) => {\n    setLoading(true);\n\n    const { newAmount } = values;\n\n    const decNewAmount = Decimal.fromUserInput(newAmount, tokenDecimals);\n    const decCurrentAmount = Decimal.fromAtomics(allowanceAmount, tokenDecimals);\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    try {\n      let allowanceOperation: Promise<string> = Promise.reject(\"\");\n\n      if (decNewAmount.isGreaterThan(decCurrentAmount)) {\n        allowanceOperation = cw20Contract.increaseAllowance(\n          address,\n          spenderAddress,\n          decNewAmount.minus(decCurrentAmount).atomics,\n        );\n      } else {\n        allowanceOperation = cw20Contract.decreaseAllowance(\n          address,\n          spenderAddress,\n          decCurrentAmount.minus(decNewAmount).atomics,\n        );\n      }\n\n      allowanceOperation.then(() => {\n        history.push({\n          pathname: pathOperationResult,\n          state: {\n            success: true,\n            message: `${tokenName} allowance successfully set to ${newAmount} for ${spenderAddress}`,\n            customButtonText: \"Tokens\",\n          } as OperationResultState,\n        });\n      });\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Could not set allowance:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: `${pathAllowances}/${contractAddress}`,\n        } as OperationResultState,\n      });\n    }\n  };\n\n  const amountToDisplay = Decimal.fromAtomics(allowanceAmount, tokenDecimals).toString();\n\n  return (\n    (loading && <Loading loadingText={`Changing allowance...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackButton icon={backArrowIcon} path={pathTokens} />\n          <Title>Allowance</Title>\n          <Text>{spenderAddress}</Text>\n          <Amount>\n            <Text>Current</Text>\n            <Text>{amountToDisplay}</Text>\n            <Text>{tokenName}</Text>\n          </Amount>\n          <FormChangeAmount submitChangeAmount={submitChangeAmount} />\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n\nexport default AllowanceEdit;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s7);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n\nexport const TitleAmountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  span {\n    font-size: var(--s4);\n    font-weight: bolder;\n    overflow-wrap: anywhere;\n  }\n\n  span + span {\n    font-size: var(--s1);\n  }\n`;\n\nexport const AllowancesStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n\nexport const AllowanceItem = styled.div`\n  max-width: var(--max-width);\n\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  & > * + * {\n    margin-left: var(--s1);\n  }\n\n  & > span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n\n    font-size: var(--s-1);\n  }\n`;\n\nexport const AllowanceAmountCopy = styled.div`\n  display: flex;\n  align-items: center;\n\n  span + img {\n    margin-left: var(--s-2);\n  }\n\n  span {\n    font-size: var(--s1);\n    font-weight: bolder;\n  }\n\n  img {\n    cursor: pointer;\n    height: var(--s-1);\n  }\n`;\n","import { BackButton, PageLayout } from \"@cosmicdapp/design\";\nimport { AllowanceInfo, CW20, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Divider, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathAllowanceAdd, pathAllowanceEdit, pathAllowances, pathTokens } from \"../../paths\";\nimport editIcon from \"./assets/edit.svg\";\nimport {\n  AllowanceAmountCopy,\n  AllowanceItem,\n  AllowancesStack,\n  Amount,\n  MainStack,\n  TitleAmountStack,\n} from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface AllowancesParams {\n  readonly contractAddress: string;\n}\n\nfunction Allowances(): JSX.Element {\n  const history = useHistory();\n  const { getClient, address } = useSdk();\n\n  const { contractAddress }: AllowancesParams = useParams();\n\n  const [allowances, setAllowances] = useState<readonly AllowanceInfo[]>([]);\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenAmount, setTokenAmount] = useState(\"0\");\n  const [fractionalDigits, setFractionalDigits] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    cw20Contract.tokenInfo().then(({ symbol, decimals }) => {\n      setTokenName(symbol);\n      setFractionalDigits(decimals);\n    });\n    cw20Contract.balance(address).then((balance) => setTokenAmount(balance));\n    cw20Contract.allAllowances(address).then(({ allowances }) => setAllowances(allowances));\n  }, [getClient, contractAddress, address]);\n\n  function goToAllowancesEdit(spender: string) {\n    history.push(`${pathAllowances}/${contractAddress}${pathAllowanceEdit}/${spender}`);\n  }\n\n  function goToAllowancesAdd() {\n    history.push(`${pathAllowances}/${contractAddress}${pathAllowanceAdd}`);\n  }\n\n  const amountToDisplay = Decimal.fromAtomics(tokenAmount, fractionalDigits).toString();\n  const [amountInteger, maybeAmountDecimal] = amountToDisplay.split(\".\");\n  const amountDecimal = maybeAmountDecimal ?? \"\";\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <BackButton icon={backArrowIcon} path={pathTokens} />\n        <TitleAmountStack>\n          <Title>Allowances</Title>\n          <Amount>\n            <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n            <Text>\n              {amountDecimal} {tokenName}\n            </Text>\n            <Text>{\" tokens\"}</Text>\n          </Amount>\n        </TitleAmountStack>\n        <AllowancesStack>\n          {allowances.map((allowanceInfo, index) => {\n            const allowanceToDisplay = Decimal.fromAtomics(\n              allowanceInfo.allowance,\n              fractionalDigits,\n            ).toString();\n\n            return (\n              <>\n                {index > 0 && <Divider />}\n                <AllowanceItem>\n                  <Text>{allowanceInfo.spender}</Text>\n                  <AllowanceAmountCopy>\n                    <Text>{allowanceToDisplay}</Text>\n                    <img\n                      alt=\"Edit allowance\"\n                      src={editIcon}\n                      onClick={() => goToAllowancesEdit(allowanceInfo.spender)}\n                    />\n                  </AllowanceAmountCopy>\n                </AllowanceItem>\n              </>\n            );\n          })}\n        </AllowancesStack>\n        <Button type=\"primary\" onClick={goToAllowancesAdd}>\n          Add New\n        </Button>\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default Allowances;\n","import { Login as LoginDesign } from \"@cosmicdapp/design\";\nimport React from \"react\";\nimport { config } from \"../../../config\";\nimport { pathTokens } from \"../../paths\";\nimport cosmWasmLogo from \"./assets/cosmWasmLogo.svg\";\n\nfunction Login(): JSX.Element {\n  return (\n    <LoginDesign pathAfterLogin={pathTokens} appName=\"CW20 Wallet\" appLogo={cosmWasmLogo} config={config} />\n  );\n}\n\nexport default Login;\n","import { OperationResult as OperationResultDesign } from \"@cosmicdapp/design\";\nimport { History } from \"history\";\nimport React from \"react\";\nimport { pathTokens } from \"../../paths\";\nimport failIcon from \"./assets/failIcon.svg\";\nimport successIcon from \"./assets/successIcon.svg\";\n\nfunction goToTokensList(history: History) {\n  history.push(pathTokens);\n}\n\nfunction OperationResult(): JSX.Element {\n  return (\n    <OperationResultDesign\n      defaultButtonAction={goToTokensList}\n      successIcon={successIcon}\n      failIcon={failIcon}\n    />\n  );\n}\n\nexport default OperationResult;\n","// Search form not present in form-antd: https://github.com/jannikbuschke/formik-antd/blob/master/src/input/index.tsx\nimport { Input as BaseInput } from \"antd\";\nimport { InputProps as BaseInputProps, SearchProps as BaseSearchProps } from \"antd/lib/input\";\nimport { FieldProps } from \"formik\";\nimport { Field } from \"formik-antd\";\nimport * as React from \"react\";\nimport Search from \"antd/lib/input/Search\";\n\ninterface FormikFieldProps {\n  name: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  validate?: (value: any) => undefined | string | Promise<any>;\n  fast?: boolean;\n}\n\ntype InputProps = FormikFieldProps & BaseInputProps;\n\ninterface InputType\n  extends React.ForwardRefExoticComponent<\n    FormikFieldProps & BaseInputProps & React.RefAttributes<BaseInput>\n  > {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  Search: React.ForwardRefExoticComponent<FormikFieldProps & BaseSearchProps & React.RefAttributes<Search>>;\n}\n\n// eslint-disable-next-line react/display-name\nconst Input = React.forwardRef((\n  { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: InputProps,\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  ref: React.Ref<Search>,\n) => (\n  <Field name={name} validate={validate} fast={fast}>\n    {({ field: { value, onChange, onBlur } }: FieldProps) => (\n      <BaseInput\n        ref={ref}\n        name={name}\n        value={value}\n        onChange={(event) => {\n          onChange(event);\n          $onChange && $onChange(event);\n        }}\n        onBlur={(event) => {\n          onBlur(event);\n          $onBlur && $onBlur(event);\n        }}\n        {...restProps}\n      />\n    )}\n  </Field>\n));\n\nconst TypedInput = (Input as unknown) as InputType;\ntype SearchProps = FormikFieldProps & BaseSearchProps;\n\n// eslint-disable-next-line react/display-name\nTypedInput.Search = React.forwardRef(\n  (\n    { name, validate, fast, onChange: $onChange, onBlur: $onBlur, ...restProps }: SearchProps,\n    ref: React.Ref<BaseInput>,\n  ) => (\n    <Field name={name} validate={validate} fast={fast}>\n      {({ field: { value, onChange, onBlur } }: FieldProps) => (\n        <BaseInput.Search\n          ref={ref}\n          name={name}\n          value={value}\n          onChange={(event) => {\n            onChange(event);\n            $onChange && $onChange(event);\n          }}\n          onBlur={(event) => {\n            onBlur(event);\n            $onBlur && $onBlur(event);\n          }}\n          {...restProps}\n        />\n      )}\n    </Field>\n  ),\n);\n\nexport default TypedInput.Search;\n","import { Formik } from \"formik\";\nimport { Form, FormItem } from \"formik-antd\";\nimport React from \"react\";\nimport Search from \"../../../forms/Search\";\nimport { searchAddressValidationSchema } from \"../../../forms/validationSchemas\";\n\ninterface FormSearchAllowingProps {\n  readonly initialAddress?: string;\n  readonly setSearchedAddress: (value: React.SetStateAction<string>) => void;\n}\n\nfunction FormSearchAllowing({ initialAddress, setSearchedAddress }: FormSearchAllowingProps): JSX.Element {\n  return (\n    <Formik\n      initialValues={{ address: initialAddress }}\n      validationSchema={searchAddressValidationSchema}\n      onSubmit={(values) => {\n        setSearchedAddress(values.address);\n      }}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormItem name=\"address\">\n            <Search\n              name=\"address\"\n              placeholder=\"Search\"\n              enterButton\n              onSearch={(value) => {\n                formikProps.isValid && setSearchedAddress(value);\n              }}\n            />\n          </FormItem>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport default FormSearchAllowing;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  span {\n    font-size: var(--s4);\n    font-weight: bolder;\n    overflow-wrap: anywhere;\n  }\n\n  span + span {\n    font-size: var(--s1);\n  }\n`;\n\nexport const AllowanceStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n`;\n\nexport const Allowance = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n  }\n\n  span + span {\n    font-family: var(--ff-montserrat);\n    font-size: var(--s1);\n    font-weight: bolder;\n  }\n`;\n","import { BackButton, PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { CW20, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Button, Divider, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathAllowances, pathTokens, pathTokenSend } from \"../../paths\";\nimport FormSearchAllowing from \"./FormSearchAllowing\";\nimport { AccountStack, Allowance, AllowanceStack, Amount, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface TokenDetailParams {\n  readonly contractAddress: string;\n  readonly allowingAddress?: string;\n}\n\nfunction TokenDetail(): JSX.Element {\n  const history = useHistory();\n  const { getClient, address } = useSdk();\n\n  const { contractAddress, allowingAddress: allowingAddressParam }: TokenDetailParams = useParams();\n\n  const [allowingAddress, setAllowingAddress] = useState(allowingAddressParam);\n  const [allowance, setAllowance] = useState<string>();\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenAmount, setTokenAmount] = useState(\"0\");\n  const [fractionalDigits, setFractionalDigits] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n    const tokenAddress = allowingAddress ?? address;\n\n    cw20Contract.tokenInfo().then(({ symbol, decimals }) => {\n      setTokenName(symbol);\n      setFractionalDigits(decimals);\n    });\n    cw20Contract.balance(tokenAddress).then((balance) => setTokenAmount(balance));\n  }, [getClient, contractAddress, allowingAddress, address]);\n\n  function updateAllowance(allowingAddress: string) {\n    if (!allowingAddress) {\n      setAllowingAddress(undefined);\n      setAllowance(undefined);\n      return;\n    }\n\n    setAllowingAddress(allowingAddress);\n\n    const cw20contract = CW20(getClient()).use(contractAddress);\n    cw20contract.allowance(allowingAddress, address).then((response) => setAllowance(response.allowance));\n  }\n\n  function goToSend() {\n    const optionalAllowingAddress = allowingAddress ? allowingAddress : \"\";\n    history.push(`${pathTokenSend}/${contractAddress}/${optionalAllowingAddress}`);\n  }\n\n  function goToAllowances() {\n    history.push(`${pathAllowances}/${contractAddress}`);\n  }\n\n  const amountToDisplay = Decimal.fromAtomics(tokenAmount, fractionalDigits).toString();\n  const [amountInteger, amountDecimal] = amountToDisplay.split(\".\");\n\n  const allowanceToDisplay = Decimal.fromAtomics(allowance, fractionalDigits).toString();\n\n  const showCurrentAllowance = !!allowance && allowance !== \"0\";\n  const showSendButton = !allowance || allowance !== \"0\";\n  const isSendButtonDisabled = tokenAmount === \"0\";\n  const showAllowancesLink = !allowingAddress;\n\n  return (\n    <PageLayout>\n      <MainStack>\n        <BackButton icon={backArrowIcon} path={pathTokens} />\n        <AccountStack>\n          <Title>{tokenName}</Title>\n          <YourAccount hideTitle hideBalance />\n        </AccountStack>\n        <Amount>\n          <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n          {amountDecimal && <Text>{amountDecimal}</Text>}\n          <Text>{\" tokens\"}</Text>\n        </Amount>\n        <FormSearchAllowing initialAddress={allowingAddress} setSearchedAddress={updateAllowance} />\n        {showCurrentAllowance && (\n          <AllowanceStack>\n            <Divider />\n            <Allowance>\n              <Text>Your allowance</Text>\n              <Text>{allowanceToDisplay}</Text>\n            </Allowance>\n          </AllowanceStack>\n        )}\n        {showSendButton && (\n          <Button type=\"primary\" onClick={goToSend} disabled={isSendButtonDisabled}>\n            Send\n          </Button>\n        )}\n        {showAllowancesLink && (\n          <Button type=\"primary\" onClick={goToAllowances}>\n            My allowances\n          </Button>\n        )}\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default TokenDetail;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n`;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nconst TokenStack = styled(Stack)`\n  & > * {\n    --gap: 0;\n  }\n`;\n\nconst TokenItem = styled.div`\n  --v-padding: var(--s-2);\n  --border-size: 1px;\n\n  padding-top: var(--v-padding);\n  padding-bottom: var(--v-padding);\n\n  padding-left: var(--s4);\n  margin-left: calc(-1 * var(--s4));\n  padding-right: var(--s4);\n  margin-right: calc(-1 * var(--s4));\n\n  margin-bottom: calc(-1 * var(--border-size));\n\n  cursor: pointer;\n\n  &:hover,\n  &:active,\n  &:focus {\n    background-color: var(--color-primary);\n\n    & * {\n      color: white;\n    }\n  }\n\n  &:first-child > * {\n    --border-size: 0;\n  }\n\n  & > * {\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n\n    span:first-child {\n      font-family: var(--ff-iceland);\n      font-size: var(--s2);\n    }\n\n    span:not(:first-child) {\n      font-weight: bolder;\n      font-size: var(--s-1);\n    }\n  }\n`;\n\nconst BorderContainer = styled.div`\n  border-top: var(--border-size) solid var(--color-primary);\n  padding-top: var(--v-padding);\n  margin-top: calc(-1 * var(--v-padding));\n`;\n\nexport { TokenStack, TokenItem, BorderContainer };\n","import { CW20, CW20Instance, useContracts, useSdk } from \"@cosmicdapp/logic\";\nimport { Coin } from \"@cosmjs/stargate\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { config } from \"../../../../config\";\nimport { pathTokenDetail } from \"../../../paths\";\nimport { BorderContainer, TokenItem, TokenStack } from \"./style\";\n\nconst { Text } = Typography;\n\ninterface TokenData {\n  readonly coin: Coin;\n  readonly fractionalDigits: number;\n  readonly address: string;\n}\n\nfunction tokenCompare(a: TokenData, b: TokenData) {\n  if (a.coin.denom < b.coin.denom) {\n    return -1;\n  }\n  if (a.coin.denom > b.coin.denom) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction TokenList(): JSX.Element {\n  const history = useHistory();\n  const { getClient, address } = useSdk();\n  const { contracts: cw20Contracts, addContract } = useContracts();\n\n  const [tokens, setTokens] = useState<readonly TokenData[]>([]);\n\n  const getTokenData = useCallback(\n    async function getTokenData(contract: CW20Instance): Promise<TokenData> {\n      const { symbol: denom, decimals: fractionalDigits } = await contract.tokenInfo();\n      const amount = await contract.balance(address);\n\n      return { coin: { denom, amount }, fractionalDigits, address: contract.contractAddress };\n    },\n    [address],\n  );\n\n  useEffect(() => {\n    if (!config.codeId) return;\n    const client = getClient();\n\n    client.getContracts(config.codeId).then((contracts) => {\n      contracts.forEach((contract) => {\n        const newCw20contract = CW20(client).use(contract);\n        addContract(newCw20contract);\n      });\n    });\n  }, [getClient, addContract]);\n\n  useEffect(() => {\n    const tokenPromises = cw20Contracts.map(getTokenData);\n    Promise.all(tokenPromises).then((tokens) => setTokens(tokens.sort(tokenCompare)));\n  }, [cw20Contracts, getTokenData]);\n\n  function goTokenDetail(tokenAddress: string) {\n    history.push(`${pathTokenDetail}/${tokenAddress}`);\n  }\n\n  return (\n    <TokenStack>\n      {tokens.map((token) => {\n        const amountToDisplay = Decimal.fromAtomics(token.coin.amount, token.fractionalDigits).toString();\n\n        return (\n          <TokenItem key={token.address} onClick={() => goTokenDetail(token.address)}>\n            <BorderContainer>\n              <Text>{token.coin.denom}</Text>\n              <Text>{amountToDisplay !== \"0\" ? amountToDisplay : \"No tokens\"}</Text>\n            </BorderContainer>\n          </TokenItem>\n        );\n      })}\n    </TokenStack>\n  );\n}\n\nexport default TokenList;\n","import { PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { Button, Typography } from \"antd\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pathTokensAdd } from \"../../paths\";\nimport { MainStack } from \"./style\";\nimport TokenList from \"./TokenList\";\n\nconst { Title } = Typography;\n\nfunction Tokens(): JSX.Element {\n  return (\n    <PageLayout>\n      <MainStack>\n        <Title>Tokens</Title>\n        <TokenList />\n        <Link to={pathTokensAdd}>\n          <Button type=\"primary\">Add another</Button>\n        </Link>\n        <YourAccount hideBalance />\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default Tokens;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nconst MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-transfer {\n    width: 100%;\n\n    & > *:first-child {\n      width: 100%;\n    }\n\n    & > *:not(:first-child) {\n      display: none;\n    }\n\n    .ant-transfer-list {\n      height: auto;\n      max-height: 300px;\n    }\n\n    .ant-transfer-list-content-item-text {\n      text-align: left;\n    }\n  }\n`;\n\nconst FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport { MainStack, FormStack };\n","import { BackButton, OperationResultState, PageLayout } from \"@cosmicdapp/design\";\nimport { CW20, getErrorFromStackTrace, useContracts, useError, useSdk } from \"@cosmicdapp/logic\";\nimport { Contract } from \"@cosmjs/cosmwasm-stargate\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input, Transfer } from \"formik-antd\";\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { contractValidationSchema } from \"../../forms/validationSchemas\";\nimport { pathOperationResult, pathTokens, pathTokensAdd } from \"../../paths\";\nimport { FormStack, MainStack } from \"./style\";\n\nconst { Title } = Typography;\n\nfunction TokensAdd(): JSX.Element {\n  const { getClient } = useSdk();\n  const { setError } = useError();\n  const { addContract } = useContracts();\n  const history = useHistory();\n\n  const [codeId, setCodeId] = useState<number>();\n\n  const [contracts, setContracts] = useState<readonly Contract[]>([]);\n  const [selectedContractAddresses, setSelectedContractAddresses] = useState<string[]>([]);\n\n  function submitInputContract({ contract }) {\n    const codeId = !Number.isNaN(Number(contract)) && Number(contract);\n\n    if (codeId) {\n      const client = getClient();\n      client\n        .getContracts(codeId)\n        .then((contractAddresses) => {\n          const contractsPromise = [];\n          contractAddresses.forEach(contractAddress => {\n            contractsPromise.push(client.getContract(contractAddress));\n          });\n          Promise.all(contractsPromise)\n            .then((contracts) => {\n              setContracts(contracts);\n              setCodeId(codeId);\n            });\n        })\n        .catch(setError);\n    } else {\n      const contractAddress = String(contract);\n      const newCw20Contract = CW20(getClient()).use(contractAddress);\n\n      newCw20Contract\n        .tokenInfo()\n        .then(() => addContract(newCw20Contract))\n        .then(() =>\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `\"${contractAddress}\" was successfully added :)`,\n              customButtonText: \"Tokens\",\n            } as OperationResultState,\n          }),\n        )\n        .catch((stackTrace) =>\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: false,\n              message: \"Oh no... Something went wrong, please try again\",\n              error: getErrorFromStackTrace(stackTrace),\n              customButtonActionPath: pathTokensAdd,\n            } as OperationResultState,\n          }),\n        );\n    }\n  }\n\n  function handleChangeSelected(selectedAddresses: string[]) {\n    setSelectedContractAddresses(selectedAddresses);\n  }\n\n  function submitSelectContracts() {\n    selectedContractAddresses.forEach((address) => {\n      const newCw20Contract = CW20(getClient()).use(address);\n\n      newCw20Contract\n        .tokenInfo()\n        .then(() => addContract(newCw20Contract))\n        .catch((stackTrace) =>\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: false,\n              message: \"Oh no... Something went wrong, please try again\",\n              error: getErrorFromStackTrace(stackTrace),\n              customButtonActionPath: pathTokensAdd,\n            } as OperationResultState,\n          }),\n        );\n    });\n\n    history.push({\n      pathname: pathOperationResult,\n      state: {\n        success: true,\n        message: `\"Your CodeID: ${codeId}\" were successfully added :)`,\n        customButtonText: \"Tokens\",\n      } as OperationResultState,\n    });\n  }\n\n  function filterCaseInsensitive(input, option) {\n    return option.title.toLowerCase().indexOf(input.toLowerCase()) >= 0;\n  }\n\n  const showInputContract = !codeId;\n  const showCodeIdForm = !showInputContract;\n\n  return (\n    <PageLayout>\n      <BackButton icon={backArrowIcon} path={pathTokens} />\n      <MainStack>\n        <Title>Add Other</Title>\n        {showInputContract && (\n          <Formik\n            initialValues={{ contract: \"\" }}\n            onSubmit={submitInputContract}\n            validationSchema={contractValidationSchema}\n          >\n            {(formikProps) => (\n              <Form>\n                <FormStack>\n                  <FormItem name=\"contract\">\n                    <Input name=\"contract\" placeholder=\"Enter a contract address or codeID\" />\n                  </FormItem>\n                  <Button\n                    type=\"primary\"\n                    onClick={formikProps.submitForm}\n                    disabled={!(formikProps.isValid && formikProps.dirty)}\n                  >\n                    Continue\n                  </Button>\n                </FormStack>\n              </Form>\n            )}\n          </Formik>\n        )}\n        {showCodeIdForm && (\n          <Formik initialValues={{}} onSubmit={submitSelectContracts}>\n            {(formikProps) => (\n              <Form>\n                <FormStack>\n                  <FormItem name=\"contracts\">\n                    <Transfer\n                      name=\"contracts\"\n                      showSearch\n                      filterOption={filterCaseInsensitive}\n                      dataSource={contracts.map((contract) => {\n                        return { key: contract.address, title: contract.label };\n                      })}\n                      onSelectChange={handleChangeSelected}\n                      listStyle={{ listStyle: \"none\" }}\n                      render={(item) => item.title}\n                    />\n                  </FormItem>\n                  <Button\n                    type=\"primary\"\n                    onClick={formikProps.submitForm}\n                    disabled={!selectedContractAddresses.length}\n                  >\n                    Continue\n                  </Button>\n                </FormStack>\n              </Form>\n            )}\n          </Formik>\n        )}\n      </MainStack>\n    </PageLayout>\n  );\n}\n\nexport default TokensAdd;\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const FormStack = styled(Stack)`\n  & > * {\n    --gap: var(--s0);\n  }\n\n  .ant-form-item {\n    margin-bottom: 0;\n  }\n\n  button {\n    margin-top: var(--s2);\n  }\n`;\n\nexport const FormField = styled.div`\n  display: flex;\n  align-items: baseline;\n\n  & > * + * {\n    margin-left: var(--s0);\n  }\n\n  .ant-form-item {\n    flex-grow: 1;\n  }\n\n  span {\n    font-family: var(--ff-iceland);\n    font-size: var(--s2);\n  }\n`;\n","import { Decimal } from \"@cosmjs/math\";\nimport { Button, Typography } from \"antd\";\nimport { Formik } from \"formik\";\nimport { Form, FormItem, Input } from \"formik-antd\";\nimport React from \"react\";\nimport * as Yup from \"yup\";\nimport { amountField, sendAddressValidationSchema } from \"../../../forms/validationSchemas\";\nimport { FormField, FormStack } from \"./style\";\n\nconst { Text } = Typography;\n\nexport interface FormSendTokensFields {\n  readonly amount: string;\n  readonly address: string;\n}\n\ninterface FormSendTokensProps {\n  readonly tokenName: string;\n  readonly maxAmount: Decimal;\n  readonly sendTokensAction: (values: unknown) => void;\n}\n\nexport function FormSendTokens({ tokenName, maxAmount, sendTokensAction }: FormSendTokensProps): JSX.Element {\n  const sendAmountValidationSchema = Yup.object().shape({\n    amount: amountField.max(\n      maxAmount.toFloatApproximation(),\n      `Amount cannot be greater than ${maxAmount.toString()}`,\n    ),\n  });\n\n  const sendValidationSchema = sendAmountValidationSchema.concat(sendAddressValidationSchema);\n\n  return (\n    <Formik\n      initialValues={{ amount: \"\", address: \"\" }}\n      onSubmit={sendTokensAction}\n      validationSchema={sendValidationSchema}\n    >\n      {(formikProps) => (\n        <Form>\n          <FormStack>\n            <FormField>\n              <Text>Send</Text>\n              <FormItem name=\"amount\">\n                <Input name=\"amount\" placeholder=\"Enter amount\" />\n              </FormItem>\n              <Text>{tokenName}</Text>\n            </FormField>\n            <FormField>\n              <Text>to</Text>\n              <FormItem name=\"address\">\n                <Input name=\"address\" placeholder=\"Enter address\" />\n              </FormItem>\n            </FormField>\n            <Button\n              type=\"primary\"\n              onClick={formikProps.submitForm}\n              disabled={!(formikProps.isValid && formikProps.dirty)}\n            >\n              Send\n            </Button>\n          </FormStack>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n","import { Stack } from \"@cosmicdapp/design\";\nimport styled from \"styled-components\";\n\nexport const MainStack = styled(Stack)`\n  & > * {\n    --gap: var(--s4);\n  }\n\n  h1 {\n    margin: 0;\n  }\n\n  .ant-form {\n    margin-top: var(--gap);\n  }\n`;\n\nexport const AccountStack = styled(Stack)`\n  & > * {\n    --gap: var(--s2);\n  }\n`;\n\nexport const Amount = styled.div`\n  span {\n    font-size: var(--s4);\n    font-weight: bolder;\n    overflow-wrap: anywhere;\n  }\n\n  span + span {\n    font-size: var(--s1);\n  }\n`;\n","import { BackButton, Loading, OperationResultState, PageLayout, YourAccount } from \"@cosmicdapp/design\";\nimport { CW20, getErrorFromStackTrace, useSdk } from \"@cosmicdapp/logic\";\nimport { Decimal } from \"@cosmjs/math\";\nimport { Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport backArrowIcon from \"../../assets/backArrow.svg\";\nimport { pathOperationResult, pathTokenDetail, pathTokens } from \"../../paths\";\nimport { FormSendTokens, FormSendTokensFields } from \"./FormSendTokens\";\nimport { AccountStack, Amount, MainStack } from \"./style\";\n\nconst { Title, Text } = Typography;\n\ninterface TokenSendParams {\n  readonly contractAddress: string;\n  readonly allowingAddress?: string;\n}\n\nfunction TokenSend(): JSX.Element {\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { getClient, address, refreshBalance } = useSdk();\n\n  const { contractAddress, allowingAddress }: TokenSendParams = useParams();\n  const fullPathTokenDetail = `${pathTokenDetail}/${contractAddress}/${allowingAddress ?? \"\"}`;\n\n  const [tokenName, setTokenName] = useState(\"\");\n  const [tokenAmount, setTokenAmount] = useState(\"0\");\n  const [tokenDecimals, setTokenDecimals] = useState(0);\n\n  useEffect(() => {\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n    const tokenAddress = allowingAddress ?? address;\n\n    cw20Contract.tokenInfo().then(({ symbol, decimals }) => {\n      setTokenName(symbol);\n      setTokenDecimals(decimals);\n    });\n\n    if (allowingAddress) {\n      cw20Contract.allowance(allowingAddress, address).then((response) => setTokenAmount(response.allowance));\n    } else {\n      cw20Contract.balance(tokenAddress).then((balance) => setTokenAmount(balance));\n    }\n  }, [getClient, contractAddress, allowingAddress, address]);\n\n  const sendTokensAction = (values: FormSendTokensFields) => {\n    setLoading(true);\n\n    const { address: recipientAddress, amount } = values;\n    const transferAmount = Decimal.fromUserInput(amount, tokenDecimals).atomics;\n\n    const cw20Contract = CW20(getClient()).use(contractAddress);\n\n    try {\n      if (allowingAddress) {\n        cw20Contract\n          .transferFrom(address, allowingAddress, recipientAddress, transferAmount)\n          .then((txHash) => {\n            if (!txHash) {\n              return Promise.reject(\"Transfer from failed\");\n            }\n\n            refreshBalance();\n\n            history.push({\n              pathname: pathOperationResult,\n              state: {\n                success: true,\n                message: `${amount} ${tokenName} successfully sent to ${recipientAddress} with allowance from ${allowingAddress}`,\n                customButtonText: \"Token detail\",\n                customButtonActionPath: fullPathTokenDetail,\n              } as OperationResultState,\n            });\n          });\n      } else {\n        cw20Contract.transfer(address, recipientAddress, transferAmount).then((txHash) => {\n          if (!txHash) {\n            return Promise.reject(\"Transfer failed\");\n          }\n\n          refreshBalance();\n\n          history.push({\n            pathname: pathOperationResult,\n            state: {\n              success: true,\n              message: `${amount} ${tokenName} successfully sent to ${recipientAddress}`,\n              customButtonText: \"Token detail\",\n              customButtonActionPath: fullPathTokenDetail,\n            } as OperationResultState,\n          });\n        });\n      }\n    } catch (stackTrace) {\n      console.error(stackTrace);\n\n      history.push({\n        pathname: pathOperationResult,\n        state: {\n          success: false,\n          message: \"Send transaction failed:\",\n          error: getErrorFromStackTrace(stackTrace),\n          customButtonActionPath: fullPathTokenDetail,\n        } as OperationResultState,\n      });\n    }\n  };\n\n  const amountToDisplay = Decimal.fromAtomics(tokenAmount, tokenDecimals).toString();\n  const [amountInteger, amountDecimal] = amountToDisplay.split(\".\");\n\n  const maxAmount = Decimal.fromAtomics(tokenAmount, tokenDecimals);\n\n  return (\n    (loading && <Loading loadingText={`Sending ${tokenName}...`} />) ||\n    (!loading && (\n      <PageLayout>\n        <MainStack>\n          <BackButton icon={backArrowIcon} path={pathTokens} />\n          <AccountStack>\n            <Title>{tokenName}</Title>\n            <YourAccount hideTitle hideBalance />\n          </AccountStack>\n          <Amount>\n            <Text>{`${amountInteger}${amountDecimal ? \".\" : \"\"}`}</Text>\n            {amountDecimal && <Text>{amountDecimal}</Text>}\n            <Text>{\" tokens\"}</Text>\n          </Amount>\n          <FormSendTokens tokenName={tokenName} maxAmount={maxAmount} sendTokensAction={sendTokensAction} />\n        </MainStack>\n      </PageLayout>\n    ))\n  );\n}\n\nexport default TokenSend;\n","import { GlobalStyle } from \"@cosmicdapp/design\";\nimport { ContractsProvider, ErrorProvider, ProtectedSwitch, SdkProvider } from \"@cosmicdapp/logic\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { config } from \"../config\";\nimport {\n  pathAllowanceAdd,\n  pathAllowanceEdit,\n  pathAllowances,\n  pathLogin,\n  pathOperationResult,\n  pathTokenDetail,\n  pathTokens,\n  pathTokensAdd,\n  pathTokenSend,\n} from \"./paths\";\nimport AllowanceAdd from \"./routes/AllowanceAdd\";\nimport AllowanceEdit from \"./routes/AllowanceEdit\";\nimport Allowances from \"./routes/Allowances\";\nimport Login from \"./routes/Login\";\nimport OperationResult from \"./routes/OperationResult\";\nimport TokenDetail from \"./routes/TokenDetail\";\nimport Tokens from \"./routes/Tokens\";\nimport TokensAdd from \"./routes/TokensAdd\";\nimport TokenSend from \"./routes/TokenSend\";\n\nfunction App(): JSX.Element {\n  return (\n    <ErrorProvider>\n      <SdkProvider config={config}>\n        <ContractsProvider>\n          <GlobalStyle />\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route exact path=\"/\" component={Login} />\n              <Route exact path={pathLogin} component={Login} />\n              <ProtectedSwitch authPath={pathLogin}>\n                <Route exact path={pathTokens} component={Tokens} />\n                <Route exact path={`${pathTokensAdd}/:codeId?`} component={TokensAdd} />\n                <Route\n                  exact\n                  path={`${pathTokenDetail}/:contractAddress/:allowingAddress?`}\n                  component={TokenDetail}\n                />\n                <Route\n                  exact\n                  path={`${pathTokenSend}/:contractAddress/:allowingAddress?`}\n                  component={TokenSend}\n                />\n                <Route exact path={`${pathAllowances}/:contractAddress`} component={Allowances} />\n                <Route\n                  exact\n                  path={`${pathAllowances}/:contractAddress${pathAllowanceAdd}`}\n                  component={AllowanceAdd}\n                />\n                <Route\n                  exact\n                  path={`${pathAllowances}/:contractAddress${pathAllowanceEdit}/:spenderAddress`}\n                  component={AllowanceEdit}\n                />\n                <Route exact path={pathOperationResult} component={OperationResult} />\n              </ProtectedSwitch>\n            </Switch>\n          </Router>\n        </ContractsProvider>\n      </SdkProvider>\n    </ErrorProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.less\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n","module.exports = __webpack_public_path__ + \"static/media/edit.fdc29000.svg\";","module.exports = __webpack_public_path__ + \"static/media/cosmWasmLogo.15dccd19.svg\";","module.exports = __webpack_public_path__ + \"static/media/failIcon.71513020.svg\";","module.exports = __webpack_public_path__ + \"static/media/successIcon.2e305b66.svg\";","module.exports = __webpack_public_path__ + \"static/media/backArrow.9849fc2e.svg\";"],"sourceRoot":""}